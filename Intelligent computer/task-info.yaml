type: edu
custom_name: stage4
files:
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = field;
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends BaseStageTest<Clue> {
        public TicTacToeTest() throws Exception {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {
                String fullMoveInput = iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                String initial;

                switch (i % 4) {
                    case 0: initial = "start user easy\n"; break;
                    case 1: initial = "start easy user\n"; break;
                    case 2: initial = "start user medium\n"; break;
                    case 3: initial = "start medium user\n"; break;
                    default: continue;
                }

                fullGameInput = initial + fullGameInput + "exit";

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput));

                i++;
            }

            tests.add(new TestCase<Clue>()
                .setInput("start easy easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start medium easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start easy medium\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start user user\n" +
                    "1 1\n" +
                    "2 2\n" +
                    "1 2\n" +
                    "2 1\n" +
                    "1 3\n" +
                    "exit"));

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            return CheckResult.TRUE;
        }
    }
  learner_created: false
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: src/tictactoe/Condition.java
  visible: true
  text: |
    package tictactoe;

    enum Condition {
        EMPTY('_', (short) 0),
        X('X', (short) 1),
        O('O', (short) 2);

        private char name;
        private short value;

        Condition(char name, short value){
            this.value = value;
            this.name = name;
        }

        public short getValue() {
            return value;
        }

        public char getName() {
            return name;
        }

        public static short getValue(char name) {
            for (Condition condition : Condition.values()) {
                if (condition.getName() == name) {
                    return condition.getValue();
                }
            }
            return 0;
        }

        public static char getName(short value) {
            for (Condition condition : Condition.values()) {
                if (condition.getValue() == value) {
                    return condition.getName();
                }
            }
            return 0;
        }

        public static Condition getCondition(short value) {
            for (Condition condition : Condition.values()) {
                if (condition.getValue() == value) {
                    return condition;
                }
            }
            return EMPTY;
        }

        @Override
        public String toString() {
            return String.valueOf(name);
        }
    }
  learner_created: true
- name: src/tictactoe/TTGame.java
  visible: true
  text: |2-

    package tictactoe;

    import static tictactoe.Condition.*;

    public class TTGame {
        private TTField field;
        private Condition turn;
        private TTRobot xPlayer = null;
        private TTRobot oPlayer = null;

        public void setPlayers(TTRobot xPlayer, TTRobot oPlayer) {
            this.xPlayer= xPlayer;
            this.oPlayer = oPlayer;
        }

        TTGame() {
            field = new TTField("_________");
            turn = X;
        }

        public void start() {
            //Ready to start?
            if (xPlayer == null || oPlayer == null) {
                System.out.print("Players are not initialized!");
                System.exit(1);
            }

            //main Loop
            boolean playGame = true;
            Coordinates coordinates = null;
            GameStatus status = GameStatus.X_TURN;

            while (playGame) {

                showfield();

                switch (turn) {
                    case X:
                        coordinates = xPlayer.getMove();
                        break;
                    case O:
                        coordinates = oPlayer.getMove();
                        break;
                }

                if (!makeMove(coordinates)) {
                    System.out.print("Error occupied when try to make move!");
                    System.exit(1);
                }

                status = getStatus();
                switch (status) {
                    case X_WIN:
                    case O_WIN:
                    case DRAW:
                        playGame = false;
                        break;
                }
            }

            showfield();
            System.out.println(status);
        }

        public void showfield() {
            Condition[][] arr = field.toArray();
            System.out.print("---------\n");
            for (int i = 2; i > -1 ; i--) {
                System.out.print("| ");
                for (int j = 0; j < 3; j++) {
                    System.out.print(arr[i][j] == EMPTY ? "  " : arr[i][j]+  " ");
                }
                System.out.print("|\n");
            }
            System.out.print("---------\n");
        }

        public void setField(String stringFormat) {
            field = new TTField(stringFormat);
        }

        public TTField getField() {
            return field;
        }

        public GameStatus getStatus() {
            return field.getGameStatus();
        }

        public boolean makeMove(Coordinates coordinates) {
            if (coordinates.isValid() && field.isCellEmpty(coordinates)) {
               field.setCell(coordinates, turn);
               nextTurn();
               return true;
            }
            return false;
        }

        private void nextTurn() {
            if (turn == X) {
                turn = O;
            } else {
                turn = X;
            }
        }

        public Condition getCurrentTurn() {
            return turn == X? X : O; // protect turn field.
        }
    }
  learner_created: true
- name: src/tictactoe/TTField.java
  visible: true
  text: |
    package tictactoe;

    import java.util.ArrayList;

    import static tictactoe.Condition.*;
    import static tictactoe.GameStatus.*;

    class TTField {
        //String field; // like "XO___XO"
        short field; // 3^9 = 19683 so short will be enough;
        //lets take ternary system 0 = '_', 1=X ,2 = O

        TTField (String stringFormat){
            /*
            *  not logic string format
            *  [13(s0) 23(s1) 33(s2)]
            *  [12(s3) 22(s4) 32(s5)]
            *  [11(s6) 21(s7) 31(s8)]
            *  */
            int counter = 0;
            short[][] f = new short[3][3];
            for (int i = 2; i >= 0; i--) {
                for (int j = 0; j < 3; j++) {
                    f[i][j] = Condition.getValue(stringFormat.charAt(counter));
    //                System.out.printf("i=%d j=%d count=%d\n",i,j,counter);
                    counter++;
                }
            }
            field = 0;

            for (int i = 2; i >= 0; i--) {
                for (int j = 2; j >= 0; j--) {
                    field = (short)((field * 3) + f[i][j]);
                }
            }
        }

        public Condition[][] toArray() {
            short f = this.field;
            Condition[][] res = new Condition[3][3];
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    res[i][j] = Condition.getCondition((short)(f % 3));
                    f /= 3;
                }
            }
            return res;
        }

        public short getfiled() {
            return field;
        }

        /*
        * x = 1..3, y = 1..3;
         */

        public Condition getCell(Coordinates coordinates) {
            final int x = coordinates.x;
            final int y = coordinates.y;

            if ( x > 3 || x < 1 || y > 3 || y < 1) {
                System.exit(1); //todo change to Exception;
            }
            switch ((field / (short) Math.pow(3, (y - 1) * 3 + x - 1)) % 3) {
                case 1:
                    return X;
                case 2:
                    return O;
            }
            return EMPTY;
        }

        public boolean isCellEmpty(Coordinates coordinates) {
            return getCell(coordinates) == EMPTY;
        }

        private void setField(Condition[][] arr){
            field = 0;
            for (int i = 2; i >= 0; i--) {
                for (int j = 2; j >= 0; j--) {
                    field = (short)((field * 3) + arr[i][j].getValue());
                }
            }
        }

        public void setCell(Coordinates coordinates, Condition condition) {
            final int x = coordinates.x;
            final int y = coordinates.y;
            if ( x > 3 || x < 1 || y > 3 || y < 1) {
                System.exit(1); //todo change to Exception;
            }

            Condition[][] arr = toArray();
            arr[y-1][x-1] = condition;
            setField(arr);
        }

        public GameStatus getGameStatus() {
            Condition[][] f= toArray();
            // check for wins

            for (int i = 0; i < 3; i++) {
                //columns
                if (f[0][i] == f[1][i] && f[1][i] == f[2][i] && f[0][i] != EMPTY) {
                    if (f[0][i] == X) {
                        return X_WIN;
                    } else {
                        return O_WIN;
                    }
                }
                //rows
                if (f[i][0] == f[i][1] && f[i][1] == f[i][2] && f[i][0] != EMPTY) {
                    if (f[i][0] == X) {
                        return X_WIN;
                    } else {
                        return O_WIN;
                    }
                }
            }

            //diagonals
            if (((f[1][1] == f[0][0] && f[1][1] == f[2][2])
                || (f[1][1] == f[0][2] && f[1][1] == f[2][0]))
                && f[1][1] != EMPTY) {
                if (f[1][1] == X) {
                    return X_WIN;
                } else {
                    return O_WIN;
                }
            }

            // check for finished and draw.
            int xCount = 0;
            int oCount = 0;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    switch (f[i][j]) {
                        case X:
                            xCount++;
                            break;
                        case O:
                            oCount++;
                            break;
                    }
                }
            }

            if (xCount + oCount == 9) {
                return DRAW;
            }

            if (xCount == oCount ) {
                return X_TURN;
            }

            return O_TURN;
        }

        public ArrayList<Coordinates> getEmpties() {
            ArrayList<Coordinates> res = new ArrayList<>();
            Condition[][] array = toArray();
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (array[i][j] == EMPTY) {
                        res.add(new Coordinates(j + 1, i + 1));
                    }
                }
            }
            return res;
        }

    }
  learner_created: true
- name: src/tictactoe/Coordinates.java
  visible: true
  text: |
    package tictactoe;

    public class Coordinates {
        public int x, y;

        Coordinates(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public boolean isValid() {
            return x > 0 && x < 4 && y > 0 && y < 4;
        }
    }
  learner_created: true
- name: src/tictactoe/TTRobot.java
  visible: true
  text: |2+

    package tictactoe;

    import java.util.ArrayList;
    import java.util.Scanner;

    import static tictactoe.Condition.*;

    abstract class TTRobot {
        TTGame ttGame;
        Condition wePlayFor = null;

        TTRobot(TTGame ttGame) {
            this.ttGame = ttGame;

        }

        final public void makeMove(){
            Condition currentTurn = null;
            switch (ttGame.getStatus()) {
                case X_TURN:
                    currentTurn = X;
                    break;
                case O_TURN:
                    currentTurn = O;
                    break;
                default:
                    System.out.print("Cannot make move");
                    System.exit(1);
            }

            if (wePlayFor == null) {
                wePlayFor = currentTurn;
            } else if (wePlayFor != currentTurn) {
                System.out.print("Error making move. Players side was changing ");
                System.exit(1);
            }

            Coordinates coordinates = getMove();
            if (!ttGame.makeMove(coordinates)) {
                System.out.print("Error making move");
                System.exit(1);
            }
        }

        abstract Coordinates getMove();
    }

    class RobotFabrics {
        static TTRobot CreateRobot(TTGame ttGame, String difficult) {
            TTRobot robot;
            switch (difficult) {
                case "easy":
                    return new RandomRobot(ttGame);
                case "user":
                    return new UserPlay(ttGame);
            }
            return null;
        }
    }

    class RandomRobot extends TTRobot {

        private TTField field;

        RandomRobot(TTGame ttGame) {
            super(ttGame);
            field = ttGame.getField();
        }

        @Override
        Coordinates getMove() {
            ArrayList<Coordinates> emptyCoordinates = field.getEmpties();
            Coordinates res = emptyCoordinates.get((int)(Math.random() * emptyCoordinates.size()));
            System.out.println("Making move level \"easy\"");
            return res;
        }
    }

    class UserPlay extends TTRobot {
        TTField field;

        UserPlay(TTGame ttGame) {
            super(ttGame);
            field = ttGame.getField();
        }

        @Override
        Coordinates getMove() {
            Scanner scanner = new Scanner(System.in);
            int x = 0;
            int y = 0;
            boolean validAnswer = false;
            do {
                System.out.print("Enter the coordinates: ");
                String coord = scanner.nextLine();
                try {
                    String[] arr = coord.split("\\s+");
                    x = Integer.parseInt(arr[0]);
                    y = Integer.parseInt(arr[1]);

                } catch (NumberFormatException e) {
                    System.out.println("You should enter numbers!");
                    continue;

                } catch (ArrayIndexOutOfBoundsException e) {
                    System.out.println("You should enter 2 numbers!");
                    continue;
                }

                if ( x < 1 || x > 3 || y < 1 || y > 3) {
                    System.out.print("Coordinates should be from 1 to 3!\n");
                    continue;
                }

                if (!field.isCellEmpty(new Coordinates(x, y))) {

                    System.out.print("This cell is occupied! Choose another one!\n");
                    continue;
                }

                validAnswer = true;

            } while (!validAnswer);

            return new Coordinates(x, y);
        }

    }


  learner_created: true
- name: src/tictactoe/GameStatus.java
  visible: true
  text: |
    package tictactoe;

    public enum GameStatus {
        X_TURN("Game not finished"),
        O_TURN("Game not finished"),
        DRAW("Draw"),
        X_WIN("X wins"),
        O_WIN("O wins ");

        private String name;

        GameStatus(String name) {
            this.name = name;
        }

        @Override
        public String toString() {
            return name;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/450/implement
status: Solved
record: -1
